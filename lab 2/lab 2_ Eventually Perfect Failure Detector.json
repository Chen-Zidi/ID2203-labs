{"paragraphs":[{"text":"%md\n\n### Exercise 1: Build an Eventually Perfect Failure Detector\n\nAn Eventually Perfect Failure Detector (EPFD), in Kompics terms,  is a component that **provides** the following port *(already imported in the notebook)*.\n\n    class EventuallyPerfectFailureDetector extends Port {\n     indication[Suspect];\n     indication[Restore];\n    }\n\nSimply put, your component should indicate or 'deliver' to the application the following messages:\n\n    case class Suspect(src: Address) extends KompicsEvent;\n    case class Restore(src: Address) extends KompicsEvent;\n\nAs you have already learnt from the course lectures, an EPFD, defined in a partially synchronous model, should satisfy the following properties:\n\n1. **Completeness**:  Every process that crashes should be eventually suspected permanently by every correct process\n2. **Eventual Strong Accuracy**: No correct process should be eventually suspected by any other correct process\n   \nTo complete this assignment you will have to fill in the missing functionality denoted by the commented sections below and pass the property checking test at the end of this notebook.\nThe recommended algorithm to use in this assignment is *EPFD with Increasing Timeout and Sequence Numbers*,  which you can find at the second page of this [document](https://courses.edx.org/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block@epfd.pdf) in the respective lecture.\n\n\n","dateUpdated":"2021-02-04T23:07:18+0000","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Exercise 1: Build an Eventually Perfect Failure Detector</h3>\n<p>An Eventually Perfect Failure Detector (EPFD), in Kompics terms, is a component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code>class EventuallyPerfectFailureDetector extends Port {\n indication[Suspect];\n indication[Restore];\n}\n</code></pre>\n<p>Simply put, your component should indicate or &lsquo;deliver&rsquo; to the application the following messages:</p>\n<pre><code>case class Suspect(src: Address) extends KompicsEvent;\ncase class Restore(src: Address) extends KompicsEvent;\n</code></pre>\n<p>As you have already learnt from the course lectures, an EPFD, defined in a partially synchronous model, should satisfy the following properties:</p>\n<ol>\n  <li><strong>Completeness</strong>: Every process that crashes should be eventually suspected permanently by every correct process</li>\n  <li><strong>Eventual Strong Accuracy</strong>: No correct process should be eventually suspected by any other correct process</li>\n</ol>\n<p>To complete this assignment you will have to fill in the missing functionality denoted by the commented sections below and pass the property checking test at the end of this notebook.<br/>The recommended algorithm to use in this assignment is <em>EPFD with Increasing Timeout and Sequence Numbers</em>, which you can find at the second page of this <a href=\"https://courses.edx.org/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block@epfd.pdf\">document</a> in the respective lecture.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1612480038335_-80305419","id":"20160909-160459_701472878","dateCreated":"2021-02-04T23:07:18+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:462"},{"text":"import se.kth.edx.id2203.core.Ports._\nimport se.kth.edx.id2203.validation._\nimport se.sics.kompics.network._\nimport se.sics.kompics.sl.{Init, _}\nimport se.sics.kompics.timer.{ScheduleTimeout, Timeout, Timer}\nimport se.sics.kompics.{KompicsEvent, Start, ComponentDefinition => _, Port => _}","user":"anonymous","dateUpdated":"2021-02-04T23:09:23+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"import se.kth.edx.id2203.core.Ports._<br />import se.kth.edx.id2203.validation._<br />import se.sics.kompics.network._<br />import se.sics.kompics.sl.{Init, _}<br />import se.sics.kompics.timer.{ScheduleTimeout, Timeout, Timer}<br />import se.sics.kompics.{KompicsEvent, Start, ComponentDefinition=>_, Port=>_}<br />"}]},"apps":[],"jobName":"paragraph_1612480038337_-94925877","id":"20160623-152816_923395673","dateCreated":"2021-02-04T23:07:18+0000","dateStarted":"2021-02-04T23:09:23+0000","dateFinished":"2021-02-04T23:09:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:463"},{"text":"  //Custom messages to be used in the internal component implementation\n  case class CheckTimeout(timeout: ScheduleTimeout) extends Timeout(timeout);\n  case class HeartbeatReply(seq: Int) extends KompicsEvent;\n  case class HeartbeatRequest(seq: Int) extends KompicsEvent;","user":"anonymous","dateUpdated":"2021-02-04T23:19:23+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class CheckTimeout<br />defined class HeartbeatReply<br />defined class HeartbeatRequest<br />"}]},"apps":[],"jobName":"paragraph_1612480038338_-93771630","id":"20160830-153841_517626554","dateCreated":"2021-02-04T23:07:18+0000","dateStarted":"2021-02-04T23:09:27+0000","dateFinished":"2021-02-04T23:09:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:464"},{"text":"\n//Define EPFD Implementation\nclass EPFD(epfdInit: Init[EPFD]) extends ComponentDefinition {\n\n  //EPFD subscriptions\n  val timer = requires[Timer];\n  val pLink = requires[PerfectLink];\n  val epfd = provides[EventuallyPerfectFailureDetector];\n\n  // EPDF component state and initialization\n  \n  //configuration parameters\n  val self = epfdInit match {case Init(s: Address) => s};\n  val topology = cfg.getValue[List[Address]](\"epfd.simulation.topology\");\n  val delta = cfg.getValue[Long](\"epfd.simulation.delay\");\n  \n  //mutable state\n  var delay = cfg.getValue[Long](\"epfd.simulation.delay\");\n  var alive = Set(cfg.getValue[List[Address]](\"epfd.simulation.topology\"): _*);\n  var suspected = Set[Address]();\n  var seqnum = 0;\n\n  def startTimer(delay: Long): Unit = {\n    val scheduledTimeout = new ScheduleTimeout(delay);\n    scheduledTimeout.setTimeoutEvent(CheckTimeout(scheduledTimeout));\n    trigger(scheduledTimeout -> timer);\n  }\n\n  //EPFD event handlers\n  ctrl uponEvent {\n    case _: Start =>  {\n      /* WRITE YOUR CODE HERE  */\n      startTimer(delay);\n    }\n  }\n\n  timer uponEvent {\n    case CheckTimeout(_) =>  {\n      if (!alive.intersect(suspected).isEmpty) {\n          \n        /* WRITE YOUR CODE HERE  */\n        delay = delay + cfg.getValue[Long](\"epfd.simulation.delay\");\n      }\n      \n      seqnum = seqnum + 1;\n      \n      for (p <- topology) {\n        if (!alive.contains(p) && !suspected.contains(p)) {\n            \n           /* WRITE YOUR CODE HERE  */\n           suspected = suspected + p;//union\n           trigger(Suspect(p) -> epfd);\n           \n        } else if (alive.contains(p) && suspected.contains(p)) {\n          suspected = suspected - p;\n          trigger(Restore(p) -> epfd);\n        }\n        trigger(PL_Send(p, HeartbeatRequest(seqnum)) -> pLink);\n      }\n      alive = Set[Address]();\n      startTimer(delay);\n    }\n  }\n\n  pLink uponEvent {\n    case PL_Deliver(src, HeartbeatRequest(seq)) =>  {\n      /* WRITE YOUR CODE HERE  */   \n      trigger(PL_Send(src, HeartbeatReply(seq)) -> pLink);\n    }\n    case PL_Deliver(src, HeartbeatReply(seq)) => {\n      /* WRITE YOUR CODE HERE  */\n       if (seq == seqnum || suspected.contains(src)){\n          alive = alive + src;//union\n      }\n    }\n  }\n};\n\n\n","user":"anonymous","dateUpdated":"2021-02-09T20:31:55+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"HTML","data":"         val timer = requires[Timer];<br />                              ^<br />On line 6: error: not found: type Timer<br />           val scheduledTimeout = new ScheduleTimeout(delay);<br />                                      ^<br />On line 24: error: not found: type ScheduleTimeout<br />           case PL_Deliver(src, HeartbeatRequest(seq)) =>  {<br />                                ^<br />On line 66: error: not found: value HeartbeatRequest<br />             trigger(PL_Send(src, HeartbeatReply(seq)) -> pLink);<br />                                  ^<br />On line 68: error: not found: value HeartbeatReply<br />           case PL_Deliver(src, HeartbeatReply(seq)) => {<br />                                ^<br />On line 70: error: not found: value HeartbeatReply<br />"}]},"apps":[],"jobName":"paragraph_1612480038339_-94156379","id":"20160728-151056_2139297732","dateCreated":"2021-02-04T23:07:18+0000","dateStarted":"2021-02-09T20:31:55+0000","dateFinished":"2021-02-09T20:31:56+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:465"},{"text":"checkEPFD[EPFD]","user":"anonymous","dateUpdated":"2021-02-04T23:21:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Strong Completeness</td> <td class=\"tg-6k2t\">✔: Every process that crashes is eventually suspected permanently by every correct process<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Eventual Strong Accuracy</td> <td class=\"tg-6k2t\">✔: Eventually, no correct process is suspected by any correct process<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'Eventually Perfect Failure Detector' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,82,65,65,117,111,122,66,69,107,105,111,122,101,57,81,87,118,102,68,68,67,67,67,88,79,98,52,99,72,57,52,71,105,102,47,110,43,122,115,50,110,102,70,49,121,90,85,10,78,114,54,81,53,74,122,77,48,80,87,121,99,51,81,112,98,107,79,69,103,117,102,109,101,84,82,113,53,48,107,115,107,119,106,73,79,73,117,107,105,86,110,49,88,72,118,90,102,79,98,89,119,120,87,65,57,43,43,108,74,111,110,112,10,84,117,84,120,83,113,113,118,51,105,109,75,74,90,85,105,102,90,115,76,103,74,108,108,99,113,104,110,111,43,74,120,56,114,111,48,119,107,77,111,54,53,109,97,88,75,78,66,85,88,53,77,109,47,82,107,104,98,115,72,76,105,100,65,10,87,47,99,111,69,55,86,110,69,43,65,56,107,50,119,53,122,122,86,78,103,85,76,78,112,78,80,74,75,97,110,53,78,109,73,114,51,78,107,48,83,98,71,66,118,116,56,103,111,112,80,118,56,108,72,122,120,85,89,51,77,101,83,97,10,80,111,111,108,47,115,43,121,84,78,55,56,109,72,116,48,79,79,105,109,43,56,47,83,47,80,76,81,73,68,122,48,50,66,120,122,116,85,71,87,65,56,119,118,56,113,75,112,98,97,106,100,71,48,110,66,117,119,52,75,69,114,57,82,10,118,84,111,71,66,83,115,83,68,54,70,80,48,78,74,105,81,71,101,78,52,65,105,82,108,55,109,75,118,53,55,72,111,98,74,75,82,98,97,53,67,98,50,85,78,113,98,105,119,103,71,54,110,97,115,51,49,84,97,66,102,78,79,83,10,82,83,66,67,88,77,105,98,120,109,113,53,79,52,55,65,84,110,89,48,100,114,87,74,99,108,100,111,114,105,74,65,47,112,65,108,65,116,107,81,117,84,47,87,97,99,71,52,56,116,113,47,87,107,70,119,111,88,103,86,84,103,119,117,10,76,51,101,116,51,99,106,82,80,55,88,72,70,103,57,51,120,55,72,83,67,112,105,81,88,102,117,115,103,100,69,116,101,83,69,97,116,50,85,77,112,53,99,101,86,108,52,74,103,50,81,89,81,104,100,72,73,108,49,105,98,85,110,56,10,82,108,112,117,43,86,113,86,108,113,109,110,83,67,88,76,89,83,78,121,90,81,71,101,75,50,79,121,55,115,107,77,101,103,56,48,105,52,57,68,118,71,113,117,68,117,56,68,97,82,111,119,84,100,87,54,80,69,108,89,66,100,67,49,10,115,112,80,84,76,76,79,71,89,114,99,116,69,49,100,43,78,66,113,79,112,86,109,115,77,98,51,80,117,115,53,86,97,67,97,86,112,84,84,114,105,87,119,112,105,84,69,122,54,82,54,122,72,77,122,89,85,87,75,75,48,120,57,122,10,81,103,76,50,54,57,106,108,113,71,86,47,43,67,74,68,101,116,122,48,50,100,68,57,75,57,106,98,85,114,55,68,113,80,117,78,105,49,98,81,66,113,103,119,48,54,77,119,88,78,51,108,48,102,47,74,56,74,122,120,97,53,55,83,10,119,67,81,66,76,114,118,54,52,98,79,108,117,100,100,75,66,85,110,113,51,90,72,53,109,117,107,80,66,120,118,79,85,57,51,43,49,114,56,116,119,100,77,51,105,50,114,105,107,107,103,122,111,107,105,71,66,109,98,122,65,69,99,56,10,100,110,82,116,122,48,77,51,116,80,71,100,82,53,51,101,77,74,106,85,88,48,52,84,105,43,74,115,66,49,112,66,51,71,65,110,90,108,99,68,109,76,111,81,75,52,106,84,102,120,114,75,68,67,69,87,48,43,121,117,99,101,102,47,10,80,52,119,65,81,87,70,111,116,89,81,66,104,100,111,55,54,106,115,105,67,121,111,119,81,69,109,104,53,108,105,105,100,119,110,57,73,70,80,116,97,118,68,113,65,119,87,56,100,69,111,67,56,88,86,69,89,85,100,116,85,102,73,111,10,104,79,86,50,86,102,54,78,104,87,119,81,75,109,50,66,47,51,81,77,87,100,102,48,102,55,88,112,82,53,70,83,43,80,83,100,100,110,65,97,76,81,112,98,50,97,51,115,103,115,81,56,43,85,120,107,119,82,116,120,54,71,99,114,10,117,71,65,72,102,90,75,55,97,108,100,122,83,108,116,68,120,118,85,99,52,89,99,82,110,47,56,117,112,121,66,110,57,57,120,51,56,56,108,99,118,52,43,84,88,120,99,108,116,118,99,61,10,61,113,80,116,106,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />res1: Boolean = true<br />"}]},"apps":[],"jobName":"paragraph_1612480038346_-96849621","id":"20160704-003955_2062490082","dateCreated":"2021-02-04T23:07:18+0000","dateStarted":"2021-02-04T23:21:46+0000","dateFinished":"2021-02-04T23:21:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:466"},{"text":"","dateUpdated":"2021-02-04T23:07:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612480038348_-99158115","id":"20160728-143652_1894660652","dateCreated":"2021-02-04T23:07:18+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:467"}],"name":"lab 2: Eventually Perfect Failure Detector","id":"2FW2TMZ2K","angularObjects":{"2BKQCVH92:shared_process":[],"2CVXXPNWV:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}