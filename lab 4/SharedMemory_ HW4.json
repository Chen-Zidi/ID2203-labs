{"paragraphs":[{"text":"%md\n\n### Implementing an Atomic N-N register \n\nIn this programming assignment you will have to complete the implementation of an atomic register that supports multiple writers and readers.\n\nWhen you are done you simply have to export your notebook and then upload it in the \"Programming Exercise 3\" page.\n\n**Things to Remember**:\n1. Basic components such as `PerfectLink`,  `Network` and `Timer` are already provided. No need to implement them.\n2. Execute the imports defined below **before** compiling your component implementations.\n3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.\n4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. `println(s\"Process $self delivers message $msg\");`\n5. Remember that during the simulation check you can print and observe the simulation time, i.e. with `System.currentTimeMillis()`.\n5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied **before** exporting and submitting the notebook.\n6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)\n\nGood luck! :)","dateUpdated":"2021-02-15T15:12:23+0000","config":{"editorSetting":{},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Implementing an Atomic N-N register</h3>\n<p>In this programming assignment you will have to complete the implementation of an atomic register that supports multiple writers and readers.</p>\n<p>When you are done you simply have to export your notebook and then upload it in the &ldquo;Programming Exercise 3&rdquo; page.</p>\n<p><strong>Things to Remember</strong>:<br/>1. Basic components such as <code>PerfectLink</code>, <code>Network</code> and <code>Timer</code> are already provided. No need to implement them.<br/>2. Execute the imports defined below <strong>before</strong> compiling your component implementations.<br/>3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.<br/>4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. <code>println(s&quot;Process $self delivers message $msg&quot;);</code><br/>5. Remember that during the simulation check you can print and observe the simulation time, i.e. with <code>System.currentTimeMillis()</code>.<br/>5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied <strong>before</strong> exporting and submitting the notebook.<br/>6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)</p>\n<p>Good luck! :)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1613401943296_367205531","id":"20160920-133253_275876456","dateCreated":"2021-02-15T15:12:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5142"},{"text":"//Rremember to execute the following imports first\nimport se.kth.edx.id2203.core.ExercisePrimitives._\nimport se.kth.edx.id2203.core.Ports._\nimport se.kth.edx.id2203.validation._\nimport se.sics.kompics.network._\nimport se.sics.kompics.sl.{Init, _}\nimport se.sics.kompics.{ComponentDefinition => _, Port => _,KompicsEvent}\n\nimport scala.collection.mutable.Map\nimport scala.language.implicitConversions","user":"anonymous","dateUpdated":"2021-02-15T22:18:24+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"import se.kth.edx.id2203.core.ExercisePrimitives._<br />import se.kth.edx.id2203.core.Ports._<br />import se.kth.edx.id2203.validation._<br />import se.sics.kompics.network._<br />import se.sics.kompics.sl.{Init, _}<br />import se.sics.kompics.{ComponentDefinition=>_, Port=>_, KompicsEvent}<br />import scala.collection.mutable.Map<br />import scala.language.implicitConversions<br />"}]},"apps":[],"jobName":"paragraph_1613401943313_372976765","id":"20160830-120308_471915891","dateCreated":"2021-02-15T15:12:23+0000","dateStarted":"2021-02-15T22:18:24+0000","dateFinished":"2021-02-15T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5143"},{"text":"%md\n\n### Mini Scala-Refresher : The Scala Option ###\n\nIn this assignment you will have to work with Option types, so let's recap how they work. An `Option[T]` is a container for a value of type `T` which is **optional**. \nThat means that in case the value has been set, then `Option[T]` is actually an instance of `Some[T]`, which in turn contains the actual value of type `T`. \nIn case its value has not been set then the `Option[A]` is the object `None`.\n\nThus, it is good to have in mind the following e.g. for any  `value: Option[Any]`:\n\n\n1.When you want to initialize your optional value do it as such: \n```scala \nvalue = Some(myInitialValue) \n//or\nvalue = None;\n```\n2.In case you need to provide a default value in case of a `None` when you want to access an optional type you can do so like this:\n```scala\nval myVal:T = value.getOrElse(myDefaultValue)\n```\nOtherwise you can always simply get its value when you are sure it is not `None` like this:\n```scala\nif(value.isDefined){\n    myVal = value.get\n}\n```\n3.Beware of the following assignment: for `val myVal :Option[Any] = Some(1334)` then `val myOtherVal : Option[Any] = Some(myVal)` will not be `Some(1334)` but `Some(Some(1334))`","dateUpdated":"2021-02-15T15:12:23+0000","config":{"editorSetting":{},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Mini Scala-Refresher : The Scala Option</h3>\n<p>In this assignment you will have to work with Option types, so let&rsquo;s recap how they work. An <code>Option[T]</code> is a container for a value of type <code>T</code> which is <strong>optional</strong>.<br/>That means that in case the value has been set, then <code>Option[T]</code> is actually an instance of <code>Some[T]</code>, which in turn contains the actual value of type <code>T</code>.<br/>In case its value has not been set then the <code>Option[A]</code> is the object <code>None</code>.</p>\n<p>Thus, it is good to have in mind the following e.g. for any <code>value: Option[Any]</code>:</p>\n<p>1.When you want to initialize your optional value do it as such: </p>\n<pre><code class=\"scala \">value = Some(myInitialValue) \n//or\nvalue = None;\n</code></pre>\n<p>2.In case you need to provide a default value in case of a <code>None</code> when you want to access an optional type you can do so like this:</p>\n<pre><code class=\"scala\">val myVal:T = value.getOrElse(myDefaultValue)\n</code></pre>\n<p>Otherwise you can always simply get its value when you are sure it is not <code>None</code> like this:</p>\n<pre><code class=\"scala\">if(value.isDefined){\n    myVal = value.get\n}\n</code></pre>\n<p>3.Beware of the following assignment: for <code>val myVal :Option[Any] = Some(1334)</code> then <code>val myOtherVal : Option[Any] = Some(myVal)</code> will not be <code>Some(1334)</code> but <code>Some(Some(1334))</code></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1613401943314_374131011","id":"20160920-163834_1484371572","dateCreated":"2021-02-15T15:12:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5144"},{"text":"%md\n\n## The N-N Atomic Register ##\n\nA (single) Atomic Register Abstraction (AR), in Kompics terms,  is a component that **provides** the following port *(already imported in the notebook)*.\n\n     class AtomicRegister extends Port {\n       request[AR_Read_Request]\n       request[AR_Write_Request]\n       indication[AR_Read_Response]\n       indication[AR_Write_Response]\n     }\n\n\nAn **AR** component should request reads (`AR_Read_Request`) or writes (`AR_Write_Request`) and respond with `AR_Read_Response` or `AR_Write_Response` events respectively as defined below:\n\n     case class AR_Read_Request() extends KompicsEvent\n     case class AR_Read_Response(value: Option[Any]) extends KompicsEvent\n     case class AR_Write_Request(value: Any) extends KompicsEvent\n     case class AR_Write_Response() extends KompicsEvent\n\n\nAs you have already learnt from the course lectures, Atomic Registers should be linerarizable and also terminate which we summarize with the following properties:\n\n1. **Termination**: *If a correct process invokes an operation, then the operation eventually completes.*\n2. **Atomicity**: *Every read operation returns the value that was written most recently in a hypothetical execution, where every failed operation appears to be complete or does not appear to have been invoked at all, and every complete operation appears to have been executed at some instant between its invocation and its completion.*\n\n\nHINT: The recommended algorithm to use in this assignment is *Read-Impose Write-Consult Majority* and is described at page 3 within the following  [document](https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/1c5fbe3090dfe445c8858e42c5925d0f/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/atomicregister.pdf) in the respective lecture.\n","dateUpdated":"2021-02-15T15:12:23+0000","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>The N-N Atomic Register</h2>\n<p>A (single) Atomic Register Abstraction (AR), in Kompics terms, is a component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code> class AtomicRegister extends Port {\n   request[AR_Read_Request]\n   request[AR_Write_Request]\n   indication[AR_Read_Response]\n   indication[AR_Write_Response]\n }\n</code></pre>\n<p>An <strong>AR</strong> component should request reads (<code>AR_Read_Request</code>) or writes (<code>AR_Write_Request</code>) and respond with <code>AR_Read_Response</code> or <code>AR_Write_Response</code> events respectively as defined below:</p>\n<pre><code> case class AR_Read_Request() extends KompicsEvent\n case class AR_Read_Response(value: Option[Any]) extends KompicsEvent\n case class AR_Write_Request(value: Any) extends KompicsEvent\n case class AR_Write_Response() extends KompicsEvent\n</code></pre>\n<p>As you have already learnt from the course lectures, Atomic Registers should be linerarizable and also terminate which we summarize with the following properties:</p>\n<ol>\n  <li><strong>Termination</strong>: <em>If a correct process invokes an operation, then the operation eventually completes.</em></li>\n  <li><strong>Atomicity</strong>: <em>Every read operation returns the value that was written most recently in a hypothetical execution, where every failed operation appears to be complete or does not appear to have been invoked at all, and every complete operation appears to have been executed at some instant between its invocation and its completion.</em></li>\n</ol>\n<p>HINT: The recommended algorithm to use in this assignment is <em>Read-Impose Write-Consult Majority</em> and is described at page 3 within the following <a href=\"https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/1c5fbe3090dfe445c8858e42c5925d0f/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/atomicregister.pdf\">document</a> in the respective lecture.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1613401943316_371822518","id":"20160920-163704_1475979424","dateCreated":"2021-02-15T15:12:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5145"},{"text":"\n  //The following events are to be used internally by the Atomic Register implementation below\n  case class READ(rid: Int) extends KompicsEvent;\n  case class VALUE(rid: Int, ts: Int, wr: Int, value: Option[Any]) extends KompicsEvent;\n  case class WRITE(rid: Int, ts: Int, wr: Int, writeVal: Option[Any]) extends KompicsEvent;\n  case class ACK(rid: Int) extends KompicsEvent;\n\n  /**\n    * This augments tuples with comparison operators implicitly, which you can use in your code. \n    * examples: (1,2) > (1,4) yields 'false' and  (5,4) <= (7,4) yields 'true' \n    */\n  implicit def addComparators[A](x: A)(implicit o: math.Ordering[A]): o.OrderingOps = o.mkOrderingOps(x);\n\n//HINT: After you execute the latter implicit ordering you can compare tuples as such within your component implementation:\n(1,2) <= (1,4);\n","dateUpdated":"2021-02-15T22:18:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class READ<br />defined class VALUE<br />defined class WRITE<br />defined class ACK<br />addComparators: [A](x: A)(implicit o: scala.math.Ordering[A])o.OrderingOps<br />res0: Boolean = true<br />"}]},"apps":[],"jobName":"paragraph_1613401943317_371437769","id":"20160920-164336_1137661827","dateCreated":"2021-02-15T15:12:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5146","user":"anonymous","dateFinished":"2021-02-15T22:18:39+0000","dateStarted":"2021-02-15T22:18:33+0000"},{"text":"\nclass ReadImposeWriteConsultMajority(init: Init[ReadImposeWriteConsultMajority]) extends ComponentDefinition {\n\n  //subscriptions\n\n  val nnar = provides[AtomicRegister];\n\n  val pLink = requires[PerfectLink];\n  val beb = requires[BestEffortBroadcast];\n\n  //state and initialization\n\n  val (self: Address, n: Int, selfRank: Int) = init match {\n    case Init(selfAddr: Address, n: Int) => (selfAddr, n, AddressUtils.toRank(selfAddr))\n  };\n\n  var (ts, wr) = (0, 0);\n  var value: Option[Any] = None;\n  var acks = 0;\n  var readval: Option[Any] = None;\n  var writeval: Option[Any] = None;\n  var rid = 0;\n  var readlist: Map[Address, (Int, Int, Option[Any])] = Map.empty\n  var reading = false;\n\n  //handlers\n\n  nnar uponEvent {\n    case AR_Read_Request() => {\n        rid = rid + 1;\n      \n        /* WRITE YOUR CODE HERE  */\n        acks = 0;\n        readlist.clear;\n        reading = true;\n        trigger(BEB_Broadcast(READ(rid)) -> beb);\n        \n    };\n    case AR_Write_Request(wval) => { \n        rid = rid + 1;\n         \n        /* WRITE YOUR CODE HERE  */\n        writeval = Some(wval);\n        acks = 0;\n        readlist.clear;\n        trigger(BEB_Broadcast(READ(rid))->beb);\n    }\n  }\n\n  beb uponEvent {\n    case BEB_Deliver(src, READ(readID)) => {\n    \n     /* WRITE YOUR CODE HERE  */\n     trigger(PL_Send(src, VALUE(readID,ts,wr,value))->pLink);\n     \n    }\n    case BEB_Deliver(src, w: WRITE) => {\n       \n     /* WRITE YOUR CODE HERE  */\n     if((w.ts,w.wr) > (ts,wr)){\n         ts = w.ts;\n         wr = w.wr;\n         value = w.writeVal;\n       \n     }\n    \n     trigger(PL_Send(src, ACK(w.rid))->pLink);\n    }\n  }\n\n  pLink uponEvent {\n    case PL_Deliver(src, v: VALUE) => {\n      if (v.rid == rid) {\n         \n      /* WRITE YOUR CODE HERE  */\n        \n        readlist += (src -> (v.ts, v.wr, v.value));\n        \n        var string = readlist.toString;\n        println(s\"readlist $string\");\n        \n        if(readlist.size > n/2){\n                var maxts =  0;\n                var rr = 0;\n                for(p <- readlist){\n                   \n                   if((p._2._1 > maxts) || (p._2._1 == maxts && p._2._2 > rr)){\n                       maxts = p._2._1;\n                       rr = p._2._2;\n                       readval = p._2._3;\n                       //(maxts,rr,readval) = p;\n                   }  \n                }\n              println(s\"maxts $maxts\");\n               readlist.clear;\n               var bcastval: Option[Any] = None;\n               if(reading){\n                   bcastval = readval;\n               }else{\n                   rr = selfRank;\n                   maxts = maxts + 1;\n                   bcastval = writeval;\n               }\n               \n               trigger(BEB_Broadcast(WRITE(rid, maxts, rr, bcastval))->beb);\n        }\n        \n      }\n    }\n    case PL_Deliver(src, v: ACK) => {\n      if (v.rid == rid) {\n  \n      /* WRITE YOUR CODE HERE  */\n        acks = acks + 1;\n        if(acks > n/2){\n            acks = 0;\n            if(reading){\n                reading = false;\n                trigger(AR_Read_Response(readval)->nnar);\n            }else{\n                trigger(AR_Write_Response()->nnar);\n            }\n        }\n      }\n    }\n  }\n}","dateUpdated":"2021-02-16T00:15:02+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class ReadImposeWriteConsultMajority<br />"}]},"apps":[],"jobName":"paragraph_1613401943319_372207267","id":"20160830-120402_168996820","dateCreated":"2021-02-15T15:12:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5147","user":"anonymous","dateFinished":"2021-02-16T00:15:02+0000","dateStarted":"2021-02-16T00:15:02+0000"},{"text":" checkNNAR[ReadImposeWriteConsultMajority]();","dateUpdated":"2021-02-16T00:15:06+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Termination</td> <td class=\"tg-6k2t\">✔: Every operation invoked by a correct process eventually completes<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Atomicity/Linerizability</td> <td class=\"tg-6k2t\">✔: Every read operation returns the value that was written most recently in a hypothetical global execution<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'NN Atomic Register' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,81,47,47,81,86,85,79,117,98,56,72,74,70,103,109,111,122,69,73,107,118,81,55,88,72,109,118,80,53,120,85,55,77,103,69,116,120,53,100,43,50,76,66,122,122,99,55,10,107,70,103,101,117,97,47,43,86,78,106,48,54,74,78,76,118,51,102,52,72,75,74,66,116,51,115,89,88,54,99,116,98,107,118,65,85,74,103,97,53,111,87,85,119,103,78,109,67,87,76,72,82,111,114,71,120,109,83,56,98,111,67,109,10,49,111,118,77,99,55,117,117,119,87,49,82,98,112,50,66,52,49,81,65,88,103,120,66,55,74,43,87,117,43,111,115,50,79,107,114,53,48,75,86,90,69,104,72,100,83,107,67,119,99,110,99,87,105,108,120,72,120,56,115,50,116,98,50,10,76,50,103,81,116,82,100,57,66,97,69,49,89,117,88,84,71,108,101,50,110,54,78,107,117,122,117,97,43,85,79,50,57,86,108,113,55,57,86,103,109,118,97,82,105,105,77,78,116,48,120,77,111,114,88,49,122,56,68,77,55,101,68,52,10,97,88,78,82,103,67,97,51,118,106,77,66,49,87,105,100,43,47,112,113,110,67,49,67,76,65,73,78,66,82,81,122,48,117,111,82,73,120,68,82,110,101,98,71,69,102,88,57,111,72,105,107,79,54,69,119,69,112,113,105,115,120,101,100,10,108,122,70,68,80,90,43,53,113,110,52,107,110,98,88,51,69,105,65,68,107,89,108,85,106,80,113,122,48,84,77,69,90,100,52,80,86,83,48,78,70,116,121,77,110,52,47,98,99,89,97,112,52,56,113,51,85,97,100,105,49,121,49,54,10,84,104,78,102,86,48,73,85,54,99,81,100,114,51,79,74,105,102,54,90,72,122,100,113,102,120,102,108,76,77,90,81,111,78,111,115,83,100,104,71,53,83,57,70,100,57,122,66,79,54,49,57,101,72,75,49,114,114,102,81,79,74,119,48,10,82,88,77,97,69,118,105,114,98,104,43,77,73,43,110,105,55,57,53,111,105,54,110,99,89,122,114,74,67,102,76,119,67,81,101,107,65,122,76,57,72,90,85,70,55,108,55,74,111,51,87,47,98,110,105,102,66,68,66,117,48,119,85,65,10,89,74,76,79,56,51,113,66,84,86,87,43,121,83,71,86,112,101,80,85,108,75,49,71,104,83,97,84,122,103,119,50,56,54,82,53,105,112,48,67,101,98,47,49,56,68,117,65,54,112,82,106,86,84,53,70,87,86,66,104,99,81,87,86,10,53,78,67,47,50,105,84,72,106,115,66,85,116,70,82,65,111,51,116,78,89,53,69,85,71,68,97,88,103,113,53,114,55,110,87,77,111,68,79,48,72,105,100,76,72,105,76,80,103,82,77,77,90,80,78,51,90,65,121,79,87,99,71,50,10,112,73,115,120,87,122,86,50,102,71,76,75,73,67,78,76,57,108,75,88,119,107,66,50,98,84,52,97,85,55,99,104,114,82,121,72,112,107,105,47,105,47,87,52,49,119,103,74,47,73,88,101,69,121,43,105,90,82,101,108,82,50,84,83,10,119,65,115,66,43,55,48,85,100,54,83,56,108,78,74,74,100,107,72,100,80,74,99,85,70,101,71,117,106,50,75,110,67,73,76,120,111,120,51,80,84,73,86,89,71,97,102,52,122,119,52,51,68,101,77,67,52,110,106,106,98,77,78,121,10,70,47,107,77,69,81,78,89,84,89,114,43,57,67,121,107,67,47,57,109,55,65,74,106,65,55,109,122,121,121,57,114,106,108,53,74,106,88,119,70,68,112,101,120,66,79,105,78,73,97,69,49,87,118,116,97,56,43,122,102,76,84,108,112,10,74,122,71,97,107,69,100,117,117,84,113,48,54,77,101,65,67,69,81,56,98,117,71,54,76,104,54,102,78,122,70,73,49,85,75,49,86,112,113,103,109,99,49,112,70,97,90,68,69,112,83,81,101,79,77,49,79,109,68,109,57,77,47,80,10,69,65,43,52,81,120,55,83,50,77,110,111,76,89,77,107,122,115,80,111,49,108,80,66,119,113,47,88,97,70,101,70,87,114,81,54,110,75,53,82,113,99,82,121,108,116,50,105,85,113,119,56,112,112,86,75,103,99,47,79,106,103,67,111,10,108,57,57,100,72,81,76,116,106,78,79,108,66,67,43,47,121,103,61,61,10,61,111,97,66,73,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />res9: Boolean = true<br />"}]},"apps":[],"jobName":"paragraph_1613401943320_370283522","id":"20160830-120430_1188854740","dateCreated":"2021-02-15T15:12:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5148","user":"anonymous","dateFinished":"2021-02-16T00:15:13+0000","dateStarted":"2021-02-16T00:15:06+0000"},{"dateUpdated":"2021-02-15T15:12:23+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1613401943321_369898774","id":"20160830-120658_2133406867","dateCreated":"2021-02-15T15:12:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5149"}],"name":"SharedMemory: HW4","id":"2FWVWP5SN","angularObjects":{"2BKQCVH92:shared_process":[],"2CVXXPNWV:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}